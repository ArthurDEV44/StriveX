---
import { getPricingPlans, useTranslations } from '../../i18n';
import { Check, BadgeCheck, ArrowRight } from 'lucide-astro';
import { siteConfig } from '../../site.config';

interface Props {
  locale: 'fr' | 'en';
}

const { locale } = Astro.props;
const t = useTranslations(locale);
const pricingPlans = getPricingPlans(locale);

const addons = [
  {
    name: t('pricing.addon.ai'),
    price: t('pricing.addon.price')
  }
];

// Génération du Schema.org Service/Offer pour chaque plan
const serviceSchema = {
  "@context": "https://schema.org",
  "@type": "WebPage",
  "name": locale === 'fr' ? "Tarifs StriveX - Sites et MVPs pour startups" : "StriveX Pricing - Websites and MVPs for startups",
  "description": locale === 'fr' ? "Offres de développement web pour startups : Launch (1 800€), Scale (2 800€), MVP (4 500€). Livraison rapide et support inclus." : "Web development packages for startups: Launch (€1,800), Scale (€2,800), MVP (€4,500). Fast delivery and support included.",
  "offers": pricingPlans.map(plan => ({
    "@type": "Offer",
    "name": `Pack ${plan.name}`,
    "description": plan.description,
    "price": plan.price,
    "priceCurrency": "EUR",
    "availability": "https://schema.org/InStock",
    "url": `${siteConfig.url}#pricing`,
    "seller": {
      "@type": "Organization",
      "name": "StriveX"
    },
    "itemOffered": {
      "@type": "Service",
      "name": `Pack ${plan.name}`,
      "description": `${plan.description}. ${locale === 'fr' ? 'Inclus' : 'Included'} : ${plan.features.join(', ')}`,
      "provider": {
        "@type": "Organization",
        "name": "StriveX"
      }
    }
  }))
};
---

<!-- Schema.org Service/Offer structured data -->
<script type="application/ld+json" set:html={JSON.stringify(serviceSchema)} />

<!-- Section Pricing avec sémantique appropriée -->
<section 
  id="pricing" 
  class="py-16 sm:py-20 md:py-24 lg:py-28 bg-gradient-to-br from-blue-50 via-white to-purple-50 scroll-mt-24"
  aria-labelledby="pricing-heading"
>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    
    <!-- En-tête de section -->
    <header class="text-center mb-12 sm:mb-14 md:mb-16 lg:mb-20">
      <h2 
        id="pricing-heading"
        class="text-3xl sm:text-4xl md:text-5xl font-['PPMori'] font-bold text-gray-900 mb-3 sm:mb-4 tracking-tight leading-tight"
      >
        {t('pricing.heading')}
      </h2>
      <p class="text-lg sm:text-xl md:text-2xl text-gray-700 max-w-2xl lg:max-w-3xl mx-auto leading-relaxed font-['PPMori'] font-normal">
        {t('pricing.subheading')}
      </p>
    </header>

    <!-- Grille de cartes pricing -->
    <div 
      class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 sm:gap-7 md:gap-8 mb-12 sm:mb-14 md:mb-16"
      role="list"
      aria-label="Nos offres de tarification"
    >
      {pricingPlans.map((plan, index) => (
        <article 
          class={`pricing-card relative p-6 sm:p-7 md:p-8 bg-white rounded-2xl border transition-all duration-300 flex flex-col focus-within:ring-2 focus-within:ring-[#2d2d2d] focus-within:ring-offset-2 ${
            plan.popular 
              ? 'border-[#2d2d2d] shadow-[0_4px_16px_rgba(0,0,0,0.12)] lg:scale-105' 
              : 'border-gray-200 shadow-[0_2px_8px_rgba(0,0,0,0.08)]'
          }`}
          style={`animation-delay: ${index * 150}ms`}
          role="listitem"
          aria-labelledby={`plan-name-${index}`}
        >
          <!-- Badge populaire -->
          {plan.popular && (
            <div 
              class="absolute -top-3 left-1/2 -translate-x-1/2 z-10"
              role="status"
              aria-label={`${plan.badge} - Offre recommandée`}
            >
              <div class="inline-flex items-center gap-1.5 px-4 py-1.5 bg-[#2d2d2d] text-white text-xs font-['PPMori'] font-medium rounded-full tracking-wide shadow-lg">
                <BadgeCheck class="w-3.5 h-3.5" aria-hidden="true" />
                <span>{plan.badge}</span>
              </div>
            </div>
          )}

          <!-- Badge régulier -->
          {!plan.popular && (
            <div class="mb-4">
              <span 
                class="inline-block px-3 py-1.5 bg-gradient-to-br from-blue-600/5 to-purple-600/5 border border-gray-200 text-gray-700 text-xs font-['PPMori'] font-medium rounded-full tracking-wide"
                role="status"
                aria-label={plan.badge}
              >
                {plan.badge}
              </span>
            </div>
          )}

          <!-- Nom du plan -->
          <h3 
            id={`plan-name-${index}`}
            class="text-xl sm:text-2xl font-['PPMori'] font-semibold text-[#2d2d2d] mb-2 mt-2 tracking-tight"
          >
            Pack {plan.name}
          </h3>

          <!-- Description -->
          <p class="text-gray-700 text-sm sm:text-base leading-relaxed mb-6 font-['PPMori'] font-normal">
            {plan.description}
          </p>

          <!-- Prix avec meilleure structure sémantique -->
          <div 
            class="mb-6 pb-6 border-b border-gray-100"
            role="group"
            aria-label={`Prix du pack ${plan.name}`}
          >
            <div class="flex items-baseline flex-wrap gap-2">
              <span class="text-sm sm:text-base text-gray-600 font-['PPMori'] font-normal">
                {t('pricing.from')}
              </span>
              <span 
                class="text-4xl sm:text-5xl font-['PPMori'] font-semibold text-[#2d2d2d]"
                aria-label={`${plan.price} euros`}
              >
                {plan.price}
              </span>
              <span class="text-lg sm:text-xl text-gray-600">{plan.currency}</span>
              <span class="text-gray-600 text-sm">{plan.period}</span>
            </div>
          <div 
            class="mt-3 flex items-center text-sm sm:text-base"
            aria-label={locale === 'fr' ? `Délai de livraison : ${plan.deliveryTime}` : `Delivery time: ${plan.deliveryTime}`}
          >
            <span class="text-gray-700 font-['PPMori'] font-normal">
              {t('pricing.delivery')} <span class="font-semibold text-[#2d2d2d]">{plan.deliveryTime}</span>
            </span>
          </div>
          <p class="text-xs text-gray-600 mt-2 font-['PPMori'] font-normal">
            {t('pricing.delivery.note')}
          </p>
        </div>

          <!-- Liste des fonctionnalités avec sémantique appropriée -->
          <ul 
            class="space-y-3 mb-6 sm:mb-8 flex-grow list-none"
            role="list"
            aria-label={`Fonctionnalités du pack ${plan.name}`}
          >
            {plan.features.map((feature, featureIndex) => (
              <li 
                class="flex items-start gap-3"
                role="listitem"
              >
                <Check 
                  class="w-4 h-4 sm:w-5 sm:h-5 text-[#2d2d2d] flex-shrink-0 mt-0.5" 
                  aria-hidden="true"
                />
                <span class="text-gray-700 text-sm sm:text-base leading-relaxed font-['PPMori'] font-normal">
                  {feature}
                </span>
              </li>
            ))}
          </ul>

          <!-- CTA avec accessibilité améliorée -->
          <a 
            href="#contact"
            class={`group inline-flex items-center justify-center gap-2 w-full py-3 sm:py-3.5 px-6 text-center font-['PPMori'] font-medium text-sm sm:text-base rounded-full transition-all duration-300 mt-auto focus:outline-none focus-visible:ring-2 focus-visible:ring-[#2d2d2d] focus-visible:ring-offset-4 ${
              plan.popular 
                ? 'bg-[#2d2d2d] text-white hover:bg-[#1a1a1a] shadow-[0_2px_8px_rgba(0,0,0,0.15)] hover:shadow-[0_4px_16px_rgba(0,0,0,0.2)]' 
                : 'bg-white border border-[#e5e5e5] text-[#2d2d2d] hover:border-[#d1d1d1] hover:shadow-[0_2px_8px_rgba(0,0,0,0.08)] hover:bg-gray-50'
            }`}
            aria-label={`Choisir le pack ${plan.name} à ${plan.price} euros`}
          >
            <span>{plan.cta}</span>
            <ArrowRight 
              class="w-4 h-4 transition-transform duration-200 group-hover:translate-x-1" 
              aria-hidden="true"
            />
          </a>
        </article>
      ))}
    </div>

    <!-- Section Add-ons -->
    <aside 
      class="max-w-4xl mx-auto"
      aria-labelledby="addons-heading"
    >
      <div class="bg-white rounded-2xl border border-gray-200 shadow-[0_2px_8px_rgba(0,0,0,0.08)] p-6 sm:p-7 md:p-8">
        <header class="mb-6">
          <h3 
            id="addons-heading"
            class="text-xl sm:text-2xl font-['PPMori'] font-semibold text-[#2d2d2d] text-center tracking-tight"
          >
            {t('pricing.addons.title')}
          </h3>
        </header>
        
        <ul 
          class="w-full"
          role="list"
          aria-label={locale === 'fr' ? 'Options supplémentaires disponibles' : 'Additional options available'}
        >
          {addons.map((addon, addonIndex) => (
            <li 
              class="flex items-center justify-between p-4 bg-gradient-to-br from-blue-600/5 to-purple-600/5 border border-gray-200 rounded-xl"
              role="listitem"
              aria-label={locale === 'fr' ? `${addon.name} au prix de ${addon.price}` : `${addon.name} priced at ${addon.price}`}
            >
              <span class="text-gray-700 font-['PPMori'] font-medium text-sm sm:text-base">
                {addon.name}
              </span>
              <span 
                class="text-[#2d2d2d] font-['PPMori'] font-semibold text-sm sm:text-base whitespace-nowrap ml-3"
                aria-label={locale === 'fr' ? `Prix : ${addon.price}` : `Price: ${addon.price}`}
              >
                {addon.price}
              </span>
            </li>
          ))}
        </ul>
        
        <p class="text-center text-gray-700 text-sm sm:text-base mt-6 font-['PPMori'] font-normal">
          {t('pricing.addons.description')}
        </p>
      </div>
    </aside>
  </div>
</section>


<script>
  import { initIntersectionObserver } from '@/utils';

  // Animer les cards au scroll
  document.addEventListener('DOMContentLoaded', () => {
    initIntersectionObserver('.pricing-card');
  });
</script>

